. ./.env
. ./.gce

cluster=$CLUSTER_CTX

alias k="kubectl"
alias ksk="kubectl -n kube-system"
alias ki="k -n ingress"
alias kis="k -n istio-system"
alias ks="k -n system"
alias ksh="k -n shared"
alias km="k -n monitoring"
alias ka="kubectl --all-namespaces=true"
alias kaa="ka get po,rs,job,deploy,ds,statefulset,svc"
alias kap="ka get po"
alias kdel="k delete"
alias kcv="k config view"
alias kcg="k config view | grep 'current-context:' | sed -n -e 's/^.*current-context: //p'"
alias kcu="k config use-context"
alias uuid="python -c 'import sys,uuid; sys.stdout.write(uuid.uuid4().hex)' | pbcopy && pbpaste && echo"

alias kp="k proxy &"
alias h="helm tiller run tillerless -- helm"
# for kyma we need to use an old helm binary:
#function h() { bin/helm-v2.10.0 $@ --tls; }
alias his="h upgrade --install --force"
alias hk="h delete --purge"
alias kk="killall kubectl"

function kdnp() {
  for ns in default kube-system system monitoring logging team-backend; do
    kad networkpolicy -n $ns
  done
}
function kkns() {
  k get ns | grep Terminating | awk '{print $1}' | xargs  -n1 -- bash -c 'kubectl get ns "$0" -o json | jq "del(.spec.finalizers[0])" > "$0.json"; curl -k -H "Content-Type: application/json" -X PUT --data-binary @"$0.json" "http://127.0.0.1:8001/api/v1/namespaces/$0/finalize" '
}
function kkc() {
  hk $(h ls --all --short) > /dev/null
  k delete ns --all
  kkns
}

alias kku="k label installation/kyma-installation action=uninstall --overwrite"
function kkk() {
  k delete -f k8s/kyma/kyma-installer-cluster-${KYMA_VERSION}.yaml
  k delete -f k8s/kyma/tiller-${KYMA_VERSION}.yaml
  ksk delete secret tiller-secret
  # delete tiller bookkeeping as well:
  ksk delete cm $(ksk get cm | egrep "\.v[0-9]+" | awk '{print$1}')
  ksk delete secret $(ksk get secret | egrep "\.v[0-9]+" | awk '{print$1}')
  # delete crds that came with kyma:
  k delete crd $(k get crd | egrep "istio|ory|kyma|coreos|knative" | awk '{print $1}')
  # should not be needed:
  # k delete ns istio-system kyma-integration kyma-system natss knative-build knative-eventing knative-serving
}


function kpk() { ps aux|grep "$@" | awk '{print $2}' | xargs kill; }
function kad() { k delete "$@" --all; }
function kcns() { k config set-context $(k config current-context) --namespace="$@"; }
function hsk() { his --namespace=kube-system "$@"; }
function hm() { his --namespace=monitoring "$@"; }
function hin() { his --namespace=ingress "$@"; }
function hs() { his --namespace=system "$@"; }
function hsh() { his --namespace=shared "$@"; }

function hf() { bin/list-customers.sh && kcu $cluster && helmfile $@ --concurrency=1 --skip-deps; }
